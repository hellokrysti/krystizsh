function krysti_rainbow() {
	n=1
	local param=$(print -Pn $@)
	local len=$(echo  $param | wc -c)
	rainbow_lens=$(($rainbow_lens + $len))
	for ((i = 1; i < $len; i++)); do
		kr+=$(print "%{%F{${RAINBOW[$n]}}%}${param[$i]}")
		[ $n -lt $((${#RAINBOW[@]})) ] && { let "n=n+1"; } || n=1		
	done
	print ${kr}
}
print -rP $(krysti_rainbow "Loading Krysti's ZSH")
function krysti_cwd_files() {
	if [ $COLUMNS -lt 60 ]; then
		return 0
	fi
	fdir=$(find . -mindepth 1 -maxdepth 1 -type d -printf x  | wc -c)
	ffile=$(find . -mindepth 1 -maxdepth 1 -type f -printf x | wc -c)
	flink=$(find . -mindepth 1 -maxdepth 1 -type l -printf x | wc -c)
	filestat=""
	if [ ! "$fdir" -eq "0" ]; then 
		filestat+=" ${fdir} "
	fi
	if [ ! "$ffile" -eq "0" ]; then 
		filestat+=" ${ffile} "
	fi
	if [ ! "$flink" -eq "0" ]; then 
		filestat+=" ${flink} "
	fi
	unset fdir ffile flink
	cwdprint="$(krysti_is_remote) ${filestat}"
	echo -n "${cwdprint}"
}
function krysti_is_remote() {
	kcwd="${$(pwd)/#$HOME/~}"
	if [[ "$kcwd" == "~" ]]; then
		echo -n " "
		return 0
	fi
	is_remote=$(mount | grep "_netdev" | awk '{print $3}' | sed 's\'$HOME'\~\')
	if grep -q "$is_remote" <<< "$kcwd"; then
		echo -n " "
	elif test -d "./node_modules"; then
		echo -n " "
	else
		echo -n " "
	fi
}
function parse_git_branch () {
  color=""  
  if git rev-parse --git-dir >/dev/null 2>&1
  then
    gwt=$(git rev-parse --is-inside-work-tree)
    if [[ "$gwt" != "false" ]]; then
    gcwd=`pwd`
    gitb="$(git branch 2>/dev/null | grep '^*' | awk '{print $2}')"
    gits=$(git status -s 2>&1 | wc -l)
    gitu=$( git ls-files --others --exclude-standard $(git rev-parse --show-cdup) | wc -l )
    fi
    if [[ "$gits" -gt 0 ]]; then
		#if [[ "${gcwd##*/}" != ".git" ]]; then
		gitb="${lbrak}(+${gits})${gitb}${rbrak}"
		#fi
    fi
    #echo $GITBG $GITFG
    #gitver="${OKCOLOR}${GITFG}   $gitb%f%}%k%}"
    gitver="   $gitb"
  else
    return 0
  fi
  echo -n "$gitver"
}
precmd() {
	kcwd=$(krysti_cwd_files)
	gitbranch=$(parse_git_branch)
	gitlen=${#gitbranch}
	cwdlen=${#kcwd}
	kuser=$(print -P %n@%m)
	kplen=${#kuser}
}
kprompt() {
	print_prompt=""
	print_prompt+="${ccolor}┌%f${bcolor}[%f$(krysti_rainbow %n@%m)%f${bcolor}]%f"
	print_prompt+="${GITBG}${OKCOLOR}%F{16}%f%k${OKCOLOR}%f "
	print_prompt+="$(krysti_rainbow ${kcwd})%f${OKCOLOR}%f"
	print_prompt+="${GITBG}%F{16}%f${OKCOLOR}%f"
	print_prompt+="${GITFG}${GITBG}$(krysti_rainbow %D{%I:%M%P})%f"
	print_prompt+="${GITFG}${gitbranch}%k%f${GITBG/K/F}%f%k"
	if [[ "$KRYSTI_FILL" == "true" ]]; then
		kprem=$(($COLUMNS - $kplen - $cwdlen - $gitlen - 19)) # 19 static parts of this prompt
		print_prompt+="${ccolor}$(printf -- '─%.0s' {1..$kprem})%f"
		print_prompt+="${ccolor}┐%f"
	fi
	print -rP ${print_prompt}
	
}
kprompt2() {
	print_prompt=""
	cwd=$(print -P %~)
	print_prompt+="${NEWLINE}${ccolor}│%f${bcolor}[%f$(krysti_rainbow ${cwd})%f${bcolor}]%f"
	if [[ "$KRYSTI_FILL" == "true" ]]; then
		kplen=$((${#cwd} + 8))
		kprem=$(($COLUMNS - $kplen + 4)) # 4 static parts of the 2nd line prompt
		print_prompt+="${ccolor}$(printf -- '─%.0s' {1..$kprem})%f"
		print_prompt+="${ccolor}┘%f"
	fi
	print -rP ${print_prompt}
}
NEWLINE=$'\n'
PROMPT='$(kprompt)'
PROMPT+='$(kprompt2)${NEWLINE}'
PROMPT+="${ccolor}└%f${bcolor}[%f${OKCOLOR}%#%f${bcolor}]%f "
